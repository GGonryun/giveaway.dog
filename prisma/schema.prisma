generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserType {
  HOST
  PARTICIPATE
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  age           Int?
  emoji         String?
  region        String?
  type          UserType[]   @default([PARTICIPATE])
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  teams         Membership[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Sweepstakes {
  id     String            @id // takes nanoid's
  status SweepstakesStatus @default(DRAFT)

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  name        String?
  description String?
  terms       String?
  banner      String?

  startDate DateTime?
  endDate   DateTime?
  timeZone  String?

  requireEmail          Boolean?
  regionRestriction     RegionRestriction?
  minimumAgeRestriction MinimumAgeRestriction?

  prizes Prize[]
  tasks  Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SweepstakesStatus {
  DRAFT
  PAUSED
  CANCELED
  ACTIVE
  COMPLETED
}

model RegionRestriction {
  id            String      @id @default(cuid())
  sweepstakesId String      @unique
  sweepstakes   Sweepstakes @relation(fields: [sweepstakesId], references: [id], onDelete: Cascade)

  filter  RegionRestrictionFilter
  regions String[]
}

enum RegionRestrictionFilter {
  INCLUDE
  EXCLUDE
}

model MinimumAgeRestriction {
  id            String      @id @default(cuid())
  sweepstakesId String      @unique
  sweepstakes   Sweepstakes @relation(fields: [sweepstakesId], references: [id], onDelete: Cascade)

  value    Int // e.g. 18
  label    String // e.g. "Must be 18 or older"
  required Boolean // true if checkbox is mandatory
  format   String  @default("checkbox") // future proofing
}

model Prize {
  id            String      @id
  sweepstakesId String
  sweepstakes   Sweepstakes @relation(fields: [sweepstakesId], references: [id], onDelete: Cascade)

  name    String?
  index   Int?
  winners Int?
}

model Task {
  id     String    @id
  index  Int?
  type   TaskType?
  title  String?
  config Json?

  sweepstakesId String
  sweepstakes   Sweepstakes @relation(fields: [sweepstakesId], references: [id], onDelete: Cascade)

  @@unique([sweepstakesId, index])
}

enum TaskType {
  BONUS_TASK
  VISIT_URL
}

model Team {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logo      String   @default("üê∂")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members     Membership[]
  sweepstakes Sweepstakes[]
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
  BLOCKED
}

model Membership {
  id     String   @id @default(cuid())
  userId String
  teamId String
  role   TeamRole

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
