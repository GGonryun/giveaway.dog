generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  giveaways     Giveaway[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Giveaway {
  id     String         @id // takes nanoid's
  status GiveawayStatus @default(DRAFT)

  // TODO: move to organizations
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  name        String?
  description String?
  terms       String?
  banner      String?

  startDate DateTime?
  endDate   DateTime?
  timeZone  String?

  requireEmail          Boolean?
  regionalRestriction   RegionRestriction[]
  minimumAgeRestriction MinimumAgeRestriction?

  prizes Prize[]
  tasks  Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GiveawayStatus {
  DRAFT
  SCHEDULED
  PAUSED
  CANCELED
  ACTIVE
  ENDED
}

model RegionRestriction {
  id         String   @id @default(cuid())
  giveawayId String
  giveaway   Giveaway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)

  filter RegionRestrictionFilter
  code   String
}

enum RegionRestrictionFilter {
  INCLUDE
  EXCLUDE
}

model MinimumAgeRestriction {
  id         String   @id @default(cuid())
  giveawayId String   @unique
  giveaway   Giveaway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)

  value    Int // e.g. 18
  label    String // e.g. "Must be 18 or older"
  required Boolean // true if checkbox is mandatory
  format   String  @default("checkbox") // future proofing
}

model Prize {
  id         String   @id @default(cuid())
  giveawayId String
  giveaway   Giveaway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)

  name    String? // allow null for draft
  winners Int? // allow null for draft
}

model Task {
  id         String   @id @default(cuid())
  giveawayId String
  giveaway   Giveaway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)

  type      TaskType
  title     String? // nullable when draft
  value     Int? // nullable when draft
  mandatory Boolean? // nullable when draft
  config    Json?
}

enum TaskType {
  BONUS_TASK
  VISIT_URL
}
